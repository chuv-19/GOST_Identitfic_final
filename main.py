"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import os
import asyncio
import logging
from typing import Optional, List, Dict, Any
from pathlib import Path
from datetime import datetime

import pandas as pd
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TimeElapsedColumn
import typer

from doc_parser import extract_text
from references_extractor import extract_references
from validator import bulk_validate_enhanced
from excel_report_generator import ExcelReportGenerator, Document

# Document validation modules
try:
    from document_validator import DocumentValidator, DocumentType
    VALIDATOR_AVAILABLE = True
except ModuleNotFoundError:
    VALIDATOR_AVAILABLE = False
    # Fallback stubs to keep rest of the script functional
    from enum import Enum

    class DocumentType(str, Enum):
        UNKNOWN = "UNKNOWN"

    class DocumentValidator:  # type: ignore
        def __getattr__(self, item):
            raise NotImplementedError("DocumentValidator has been removed from this project")

app = typer.Typer(add_completion=False, help="–ê–Ω–∞–ª–∏–∑ .docx –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫ –Ω–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
console = Console()


def _human_status(status: str) -> str:
    color = {
        "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ": "green",
        "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ": "red",
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ": "yellow",
    }.get(status, "white")
    return f"[{color}]{status}[/{color}]"


def build_report(docx_path: Path, mistral_api_key: str | None = None, use_validator: bool = True):
    console = Console()
    
    console.rule(f"üìë –û–±—Ä–∞–±–æ—Ç–∫–∞: {docx_path.name}")
    text = extract_text(docx_path)

    with Progress(SpinnerColumn(), "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫", TimeElapsedColumn(), console=console) as progress:
        t1 = progress.add_task("extract", total=None)
        refs = extract_references(text, mistral_api_key=mistral_api_key)
        progress.remove_task(t1)

    console.print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: [bold]{len(refs)}[/bold]")

    if not refs:
        console.print("[yellow]–°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –æ—Ç—á–µ—Ç –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.[/yellow]")
        return

    # Filter references to ensure they have required fields: Type, (number or name), and date
    filtered_refs = []
    skipped_count = 0
    
    for ref in refs:
        # Check if reference has required fields
        has_type = ref.type and ref.type.strip()
        has_number_or_name = (ref.number and ref.number.strip()) or (ref.title and ref.title.strip())
        has_date = ref.date and ref.date.strip()
        
        missing_fields = []
        if not has_type:
            missing_fields.append("–¢–∏–ø")
        if not has_number_or_name:
            missing_fields.append("–ù–æ–º–µ—Ä/–ù–∞–∑–≤–∞–Ω–∏–µ")
        if not has_date:
            missing_fields.append("–î–∞—Ç–∞")
        
        if has_type and has_number_or_name and has_date:
            filtered_refs.append(ref)
        else:
            skipped_count += 1
            console.print(f"[yellow]‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –±–µ–∑ –ø–æ–ª–µ–π {', '.join(missing_fields)}: {ref.raw[:100]}...[/yellow]")

    if not filtered_refs:
        console.print(f"[red]‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ (–¢–∏–ø, –ù–æ–º–µ—Ä/–ù–∞–∑–≤–∞–Ω–∏–µ, –î–∞—Ç–∞).[/red]")
        console.print(f"[yellow]üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(refs)}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}[/yellow]")
        return

    console.print(f"‚úÖ –°—Å—ã–ª–æ–∫ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏: [bold]{len(filtered_refs)}[/bold] –∏–∑ [bold]{len(refs)}[/bold]")
    if skipped_count > 0:
        console.print(f"[yellow]‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: {skipped_count}[/yellow]")

    # Show initial table with found references before validation
    console.print(f"\nüìã [bold]–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏):[/bold]")
    initial_table = Table(show_header=True, header_style="bold blue")
    initial_table.add_column("‚Ññ", justify="right")
    initial_table.add_column("–¢–∏–ø")
    initial_table.add_column("–ù–æ–º–µ—Ä")
    initial_table.add_column("–î–∞—Ç–∞")
    initial_table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ")
    initial_table.add_column("–°—Ç–∞—Ç—É—Å")

    for idx, ref in enumerate(filtered_refs, 1):
        initial_table.add_row(
            str(idx), 
            ref.type, 
            ref.number or "", 
            ref.date or "", 
            ref.title or "", 
            "[yellow]–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏...[/yellow]"
        )

    console.print(initial_table)

    # Progress callback function
    def progress_callback(message):
        console.print(f"[blue]{message}[/blue]")

    # Validate references
    console.print(f"\nüîç [bold]–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤...[/bold]")
    
    # Additional validation if enabled
    if use_validator and VALIDATOR_AVAILABLE:
        console.print(f"[cyan]üîé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...[/cyan]")
        validator = DocumentValidator()
        
        # Enhance validation with additional checks
        enhanced_refs = []
        
        with Progress(SpinnerColumn(), "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", TimeElapsedColumn(), console=console) as progress:
            task = progress.add_task("checking", total=len(filtered_refs))
            
            for i, ref in enumerate(filtered_refs):
                # Format short description for progress
                short_desc = ref.raw[:50] + "..." if len(ref.raw) > 50 else ref.raw
                progress.update(task, advance=1, description=f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {i+1}/{len(filtered_refs)}: {short_desc}")
                
                # Initialize default status
                ref.validation_status = "–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
                ref.validation_url = None
                
                try:
                    # Determine document type
                    doc_type = None
                    ref_type_upper = ref.type.upper()
                    ref_number_upper = (ref.number or "").upper()
                    ref_title_upper = (ref.title or "").upper()
                    
                    if any(keyword in ref_type_upper or keyword in ref_number_upper or keyword in ref_title_upper 
                           for keyword in ["–ì–û–°–¢", "–û–°–¢", "–¢–£", "–°–¢–ê–ù–î–ê–†–¢"]):
                        doc_type = DocumentType.GOST
                    elif any(keyword in ref_type_upper for keyword in ["–ü–†–ò–ö–ê–ó", "–†–ê–°–ü–û–†–Ø–ñ–ï–ù–ò–ï"]):
                        doc_type = DocumentType.DECREE
                    elif "–ü–û–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï" in ref_type_upper:
                        doc_type = DocumentType.REGULATION
                    elif any(keyword in ref_type_upper for keyword in ["–ó–ê–ö–û–ù", "–ö–û–î–ï–ö–°"]):
                        doc_type = DocumentType.LAW
                    elif "–ò–ù–°–¢–†–£–ö–¶–ò–Ø" in ref_type_upper:
                        doc_type = DocumentType.INSTRUCTION
                    elif "–†–ï–ì–õ–ê–ú–ï–ù–¢" in ref_type_upper:
                        doc_type = DocumentType.TECHNICAL_REGULATION
                    
                    # Build search queries
                    search_queries = []
                    
                    if ref.type and ref.number:
                        search_queries.append(f"{ref.type} {ref.number}".strip())
                        if ref.date:
                            search_queries.append(f"{ref.type} {ref.number} –æ—Ç {ref.date}".strip())
                    
                    if ref.raw and len(ref.raw.strip()) > 10:
                        search_queries.insert(0, ref.raw.strip()[:200])
                    
                    if ref.title and len(ref.title.strip()) > 5:
                        search_queries.append(ref.title.strip()[:150])
                    
                    if ref.number and ref.title:
                        search_queries.append(f"{ref.number} {ref.title}"[:150])
                    
                    if not search_queries and ref.number:
                        search_queries.append(ref.number.strip())
                    
                    # Try each query until we find a match
                    found_doc = None
                    for query in search_queries:
                        try:
                            if doc_type:
                                found_docs = validator.search_documents(query, document_types=[doc_type], limit=1)
                            else:
                                found_docs = validator.search_documents(query, limit=1)
                                
                            if found_docs:
                                found_doc = found_docs[0]
                                break
                        except Exception as e:
                            console.print(f"[yellow]‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {str(e)}[/yellow]")
                            continue
                    
                    if found_doc:
                        ref.validation_status = found_doc.status.value
                        ref.validation_url = found_doc.url
                        
                        # Get detailed status if available
                        try:
                            detailed_status = validator.check_document_status(found_doc.id, found_doc.document_type)
                            ref.validation_status = f"{found_doc.status.value} ({detailed_status.value})"
                        except Exception as e:
                            console.print(f"[yellow]‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}[/yellow]")
                    else:
                        ref.validation_status = "–ù–µ –Ω–∞–π–¥–µ–Ω"
                        
                except Exception as e:
                    ref.validation_status = f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)[:50]}"
                    console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}[/red]")
                
                enhanced_refs.append(ref)
            
            progress.update(task, completed=len(filtered_refs))
        
        # Show validation statistics
        validated_found = sum(1 for ref in filtered_refs if ref.validation_status and "–Ω–∞–π–¥–µ–Ω" not in ref.validation_status.lower() and "–æ—à–∏–±–∫–∞" not in ref.validation_status.lower())
        not_found = sum(1 for ref in filtered_refs if "–Ω–µ –Ω–∞–π–¥–µ–Ω" in (ref.validation_status or "").lower())
        errors = sum(1 for ref in filtered_refs if "–æ—à–∏–±–∫–∞" in (ref.validation_status or "").lower())
        
        console.print("\nüìä [bold]–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:[/bold]")
        console.print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: [green]{validated_found}[/green]")
        console.print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: [red]{not_found}[/red]")
        console.print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∏: [yellow]{errors}[/yellow]")
        
        filtered_refs = enhanced_refs
    
    # Validate using standard sources
    validation_results = asyncio.run(bulk_validate_enhanced(filtered_refs, progress_callback=progress_callback))

    # Generate report
    console.print("\nüìù [bold]–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...[/bold]")
    
    report_data = []
    for ref in filtered_refs:
        validation_result = validation_results.get(ref.raw, {})
        validation_info = getattr(ref, 'validation_status', '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ')
        
        report_data.append({
            "–°—Å—ã–ª–∫–∞": ref.raw,
            "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞": ref.type,
            "–ù–æ–º–µ—Ä": ref.number,
            "–î–∞—Ç–∞": ref.date,
            "–ù–∞–∑–≤–∞–Ω–∏–µ": ref.title,
            "–°—Ç–∞—Ç—É—Å": validation_result.get("—Å—Ç–∞—Ç—É—Å", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": validation_result.get("—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", 0),
            "–í–∞–ª–∏–¥–∞—Ü–∏—è": validation_info,
            "–ò—Å—Ç–æ—á–Ω–∏–∫–∏": validation_result.get("–∏—Å—Ç–æ—á–Ω–∏–∫_—Å—Ç–∞—Ç—É—Å—ã", {})
        })

    # Create Excel report
    generator = ExcelReportGenerator()
    documents = []
    
    for data in report_data:
        try:
            # Get validation source and extract just the URL
            validation_source = data.get("–ò—Å—Ç–æ—á–Ω–∏–∫–∏", {})
            if isinstance(validation_source, dict):
                # Find the first URL in the sources
                url_source = None
                for source in validation_source.keys():
                    if "http" in source.lower():
                        url_source = source
                        break
                validation_source = url_source if url_source else "Bulk Validator"
            elif not validation_source:
                validation_source = "Bulk Validator"
            
            doc = Document(
                doc_type=data["–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞"],
                number=data["–ù–æ–º–µ—Ä"],
                date=data["–î–∞—Ç–∞"],
                title=data["–ù–∞–∑–≤–∞–Ω–∏–µ"],
                status=data["–°—Ç–∞—Ç—É—Å"],
                confidence=data["–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"],
                validation_status=getattr(ref, 'validation_status', None),
                validation_url=getattr(ref, 'validation_url', None),
                validation_source=validation_source,
                validation_date=datetime.now()
            )
            documents.append(doc)
        except Exception as e:
            console.print(f"[yellow]‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}[/yellow]")
            continue

    report_data = {
        'documents': documents,
        'source_file': str(docx_path),
        'extraction_method': 'Document Analysis',
        'processing_time': 0.0
    }
    
    # Create report path on desktop with timestamp
    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    report_filename = f"legal_documents_search_report_{timestamp}.xlsx"
    report_path = os.path.join(desktop_path, report_filename)
    
    try:
        # Ensure desktop directory exists
        os.makedirs(desktop_path, exist_ok=True)
        
        # Generate report
        report_file = generator.create_report(report_data, report_path)
        if report_file:
            console.print(f"\n‚ú® [bold green]–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:[/bold green] {report_file}")
        else:
            console.print("[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.[/red]")
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}[/red]")


@app.command("analyze")
def analyze(
    doc: Path = typer.Argument(..., exists=True, help="–ü—É—Ç—å –∫ .docx —Ñ–∞–π–ª—É"),
    api_key: str = typer.Option(None, "--api-key", "-k", help="API –∫–ª—é—á –¥–ª—è Mistral"),
    use_validator: bool = typer.Option(True, "--validator/--no-validator", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é")
):
    """–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞."""
    if not doc.suffix.lower() == '.docx':
        console.print("[red]‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .docx[/red]")
        raise typer.Exit(1)

    try:
        if use_validator:
            console.print("[cyan]‚ÑπÔ∏è  –í–∫–ª—é—á–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤[/cyan]")
        
        build_report(doc, mistral_api_key=api_key, use_validator=use_validator)
        
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞: {str(e)}[/red]")
        raise typer.Exit(1)


if __name__ == "__main__":
    app() 