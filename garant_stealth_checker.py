import time
import re
import urllib.parse
import random
import json
from typing import List, Dict, Optional
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException, NoSuchElementException

try:
    from selenium_stealth import stealth
    STEALTH_AVAILABLE = True
except ImportError:
    STEALTH_AVAILABLE = False
    print("‚ö†Ô∏è selenium-stealth –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: pip install selenium-stealth")

try:
    import undetected_chromedriver as uc
    UC_AVAILABLE = True
except ImportError:
    UC_AVAILABLE = False
    print("‚ö†Ô∏è undetected-chromedriver –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: pip install undetected-chromedriver")

from references_extractor import Reference

class StealthGarantChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ì–ê–†–ê–ù–¢ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
    
    def __init__(self, headless: bool = False, use_stealth: bool = True, use_proxies: bool = False, 
                 proxy_list: List[str] = None, use_undetected_chrome: bool = False):
        self.headless = headless
        self.use_stealth = use_stealth and STEALTH_AVAILABLE
        self.use_undetected_chrome = use_undetected_chrome and UC_AVAILABLE
        self.use_proxies = use_proxies
        self.proxy_list = proxy_list or []
        self.driver = None
        self.current_proxy = None
        
        # –ü—É–ª User-Agent —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
        self.user_agents = [
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
        ]
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
        self.screen_sizes = [
            (1920, 1080), (1366, 768), (1536, 864), (1440, 900), 
            (1280, 720), (1600, 900), (2560, 1440), (1920, 1200)
        ]

    def _setup_stealth_chrome(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Å—Ç–µ–ª—Å"""
        if self.use_undetected_chrome and UC_AVAILABLE:
            return self._setup_undetected_chrome()
        else:
            return self._setup_regular_chrome_with_stealth()
    
    def _setup_undetected_chrome(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Undetected Chrome"""
        options = uc.ChromeOptions()
        
        if self.headless:
            options.add_argument("--headless=new")
        
        width, height = random.choice(self.screen_sizes)
        options.add_argument(f"--window-size={width},{height}")
        
        if self.use_proxies and self.proxy_list:
            proxy = random.choice(self.proxy_list)
            options.add_argument(f"--proxy-server={proxy}")
            self.current_proxy = proxy
                
        options.add_argument("--no-first-run")
        options.add_argument("--no-service-autorun")
        options.add_argument("--disable-default-apps")
        
        driver = uc.Chrome(options=options, version_main=None)
        return driver
    
    def _setup_regular_chrome_with_stealth(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ Chrome —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å—Ç–µ–ª—Å"""
        chrome_options = Options()
        
        if self.headless:
            chrome_options.add_argument("--headless=new")
            
        width, height = random.choice(self.screen_sizes)
        chrome_options.add_argument(f"--window-size={width},{height}")
        
        user_agent = random.choice(self.user_agents)
        chrome_options.add_argument(f"--user-agent={user_agent}")
        
        if self.use_proxies and self.proxy_list:
            proxy = random.choice(self.proxy_list)
            chrome_options.add_argument(f"--proxy-server={proxy}")
            self.current_proxy = proxy
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ü–∏–∏
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–µ–ª—Å
        chrome_options.add_argument("--disable-plugins-discovery")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-default-apps")
        chrome_options.add_argument("--disable-sync")
        chrome_options.add_argument("--no-first-run")
        chrome_options.add_argument("--no-default-browser-check")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--disable-features=TranslateUI")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        prefs = {
            "profile.default_content_setting_values.notifications": 2,
            "profile.default_content_settings.popups": 0,
            "profile.managed_default_content_settings.images": 2,
            "profile.default_content_setting_values.cookies": 1,
            "profile.default_content_setting_values.javascript": 1,
            "profile.password_manager_enabled": False,
            "credentials_enable_service": False,
        }
        chrome_options.add_experimental_option("prefs", prefs)
        
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        return driver

    def _apply_stealth_techniques(self, driver):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Å—Ç–µ–ª—Å"""
        # Selenium-stealth –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.use_stealth and STEALTH_AVAILABLE:
            stealth(driver,
                    languages=["ru-RU", "ru", "en-US", "en"],
                    vendor="Google Inc.",
                    platform="Win32",
                    webgl_vendor="Intel Inc.",
                    renderer="Intel Iris OpenGL Engine",
                    fix_hairline=True,
                    run_on_insecure_origins=True
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        driver.execute_script("""
            Object.defineProperty(navigator, 'plugins', {
                get: () => [1, 2, 3, 4, 5],
            });
        """)
        
        driver.execute_script("""
            Object.defineProperty(navigator, 'languages', {
                get: () => ['ru-RU', 'ru', 'en-US', 'en'],
            });
        """)

    def _simulate_human_behavior(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ"""
        if not self.driver:
            return
            
        # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞
        time.sleep(random.uniform(0.5, 2.0))
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
        try:
            actions = ActionChains(self.driver)
            for _ in range(random.randint(1, 3)):
                x_offset = random.randint(-100, 100)
                y_offset = random.randint(-100, 100)
                actions.move_by_offset(x_offset, y_offset)
                actions.perform()
                time.sleep(random.uniform(0.1, 0.5))
        except Exception:
            pass
            
        # –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        try:
            scroll_amount = random.randint(100, 500)
            self.driver.execute_script(f"window.scrollBy(0, {scroll_amount});")
            time.sleep(random.uniform(0.2, 0.8))
            self.driver.execute_script(f"window.scrollBy(0, -{scroll_amount});")
        except Exception:
            pass

    def check_document(self, ref: Reference) -> Dict[str, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ü–∏–µ–π"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
            self.driver = self._setup_stealth_chrome()
            self._apply_stealth_techniques(self.driver)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            self._simulate_human_behavior()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            query = self._format_query(ref)
            print(f"üîç –ì–ê–†–ê–ù–¢ –ø–æ–∏—Å–∫ (—Å—Ç–µ–ª—Å): {query[:100]}...")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–∞–π—Ç
            encoded_query = urllib.parse.quote(query)
            search_url = f"https://ivo.garant.ru/#/basesearch/{encoded_query}/all:0"
            
            self.driver.get(search_url)
            time.sleep(random.uniform(3.0, 5.0))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self._check_if_blocked():
                return {
                    "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                    "—Å—Ç–∞—Ç—É—Å": "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
                    "url": search_url,
                    "–∑–∞–ø—Ä–æ—Å": query
                }
            
            # –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            wait = WebDriverWait(self.driver, 20)
            
            try:
                result_xpath = '/html/body/div[1]/div[2]/div[2]/div[2]/div[2]/div/div/div/div[2]/div/div/div[2]/div/div/div[4]/div/div/ul[1]/li[1]/a'
                wait.until(EC.presence_of_element_located((By.XPATH, result_xpath)))
                
                # –ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∫–ª–∏–∫
                result_link = wait.until(EC.element_to_be_clickable((By.XPATH, result_xpath)))
                self._human_like_click(result_link)
                
                time.sleep(random.uniform(3.0, 5.0))
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                page_source = self.driver.page_source.lower()
                status = self._analyze_document_status(page_source)
                
                return {
                    "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                    "—Å—Ç–∞—Ç—É—Å": status,
                    "url": self.driver.current_url,
                    "–∑–∞–ø—Ä–æ—Å": query,
                    "–º–µ—Ç–æ–¥": "stealth_check"
                }
                
            except TimeoutException:
                return {
                    "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                    "—Å—Ç–∞—Ç—É—Å": "–Ω–µ_–Ω–∞–π–¥–µ–Ω",
                    "url": search_url,
                    "–∑–∞–ø—Ä–æ—Å": query
                }
                
        except Exception as e:
            return {
                "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                "—Å—Ç–∞—Ç—É—Å": "–æ—à–∏–±–∫–∞",
                "–æ—à–∏–±–∫–∞": str(e),
                "–∑–∞–ø—Ä–æ—Å": query if 'query' in locals() else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }
        finally:
            if self.driver:
                self.driver.quit()
                self.driver = None

    def _format_query(self, ref: Reference) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        if ref.raw and len(ref.raw.strip()) > 10:
            return ref.raw.strip()[:200]
        
        query_parts = []
        
        if hasattr(ref, 'type') and ref.type:
            query_parts.append(ref.type)
        
        if ref.number:
            query_parts.append(f"‚Ññ {ref.number}")
            
        if ref.date:
            query_parts.append(f"–æ—Ç {ref.date}")
            
        if ref.title and not ref.number:
            query_parts.append(ref.title[:100])
            
        result = " ".join(query_parts)
        
        if not result and ref.number:
            result = ref.number
        elif not result and ref.title:
            result = ref.title[:100]
            
        return result or "–¥–æ–∫—É–º–µ–Ω—Ç"

    def _human_like_click(self, element):
        """–ß–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –∫–ª–∏–∫"""
        try:
            self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", element)
            time.sleep(random.uniform(0.3, 0.8))
            
            actions = ActionChains(self.driver)
            actions.move_to_element(element)
            
            x_offset = random.randint(-3, 3)
            y_offset = random.randint(-3, 3)
            actions.move_by_offset(x_offset, y_offset)
            
            time.sleep(random.uniform(0.1, 0.4))
            actions.click()
            actions.perform()
            
        except Exception:
            element.click()

    def _check_if_blocked(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É"""
        try:
            page_source = self.driver.page_source.lower()
            
            block_indicators = [
                "cloudflare", "access denied", "blocked", "captcha",
                "please verify", "robot", "bot detection", "security check"
            ]
            
            return any(indicator in page_source for indicator in block_indicators)
            
        except Exception:
            return False

    def _analyze_document_status(self, page_source: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        if "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≤–∞—à–µ–º –∫–æ–º–ø–ª–µ–∫—Ç–µ" in page_source:
            return "–Ω–µ—Ç_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        
        if any(phrase in page_source for phrase in ["–Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç", "—É—Ç—Ä–∞—Ç–∏–ª —Å–∏–ª—É", "–æ—Ç–º–µ–Ω–µ–Ω"]):
            return "–Ω–µ_–¥–µ–π—Å—Ç–≤—É–µ—Ç"
        elif any(phrase in page_source for phrase in ["–¥–µ–π—Å—Ç–≤—É–µ—Ç", "–≤ —Å–∏–ª–µ", "–∞–∫—Ç—É–∞–ª–µ–Ω"]):
            return "–¥–µ–π—Å—Ç–≤—É–µ—Ç"
        elif any(phrase in page_source for phrase in ["–∏–∑–º–µ–Ω–µ–Ω", "–¥–æ–ø–æ–ª–Ω–µ–Ω", "–Ω–æ–≤–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è"]):
            return "–∏–∑–º–µ–Ω–µ–Ω"
        else:
            return "–Ω–µ_–æ–ø—Ä–µ–¥–µ–ª–µ–Ω"

