import time
import re
import urllib.parse
from typing import List, Dict, Optional
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import concurrent.futures
import threading

from references_extractor import Reference
from garant_cache import GarantCache

class GarantChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ì–ê–†–ê–ù–¢"""
    
    def __init__(self, headless: bool = False, cache_db_path: str = "garant_cache.db", cache_ttl_hours: int = 24 * 7):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite-–∫–µ—à –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.headless = headless
        self.cache = GarantCache(cache_db_path, cache_ttl_hours)
        self.driver = None
        self.lock = threading.Lock()
        
    def _setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver"""
        chrome_options = Options()
        if self.headless:
            chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=chrome_options)
        
    def _close_driver(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ WebDriver"""
        if self.driver:
            self.driver.quit()
            self.driver = None
    
    def _wait_for_page_ready(self):
        """–ñ–¥–µ—Ç –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω"""
        try:
            # –ñ–¥–µ–º –ø–æ–∫–∞ –∏—Å—á–µ–∑–Ω—É—Ç –≤—Å–µ –º–∞—Å–∫–∏
            WebDriverWait(self.driver, 10).until_not(
                EC.presence_of_element_located((By.CSS_SELECTOR, '.x-mask'))
            )
        except:
            pass
        
        try:
            # –ñ–¥–µ–º –ø–æ–∫–∞ –∏—Å—á–µ–∑–Ω—É—Ç –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            WebDriverWait(self.driver, 5).until_not(
                EC.presence_of_element_located((By.CSS_SELECTOR, '.x-mask-loading'))
            )
        except:
            pass
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –ª—é–±—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Å –ø–æ–º–æ—â—å—é Escape
            from selenium.webdriver.common.keys import Keys
            self.driver.find_element(By.TAG_NAME, 'body').send_keys(Keys.ESCAPE)
            time.sleep(0.5)
        except:
            pass
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(2)
    
    def _format_query(self, ref: Reference) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        query_parts = []
        
        if ref.number:
            query_parts.append(f"‚Ññ {ref.number}")
        if ref.date:
            query_parts.append(f"–æ—Ç {ref.date}")
        if ref.title and not ref.number:
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            query_parts.append(ref.title[:50])
            
        return " ".join(query_parts)
    
    def check_document(self, ref: Reference) -> Dict[str, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ì–ê–†–ê–ù–¢ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        Args:
            ref: Reference –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        max_chrome_retries = 3  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ—à–∏–±–æ–∫ Chrome
        max_not_found_retries = 2  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤ "–Ω–µ –Ω–∞–π–¥–µ–Ω"
        chrome_retry_count = 0
        not_found_retry_count = 0
        
        while chrome_retry_count < max_chrome_retries:
            try:
                if not self.driver:
                    self._setup_driver()
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –∫–æ–¥–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è URL
                query = self._format_query(ref)
                encoded_query = urllib.parse.quote(query)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º (thread-safe)
                with self.lock:
                    cached = self.cache.get_cached_result(query)
                    if cached:
                        cached["–∏–∑_–∫–µ—à–∞"] = True
                        return cached
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ —Å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                search_url = f"https://ivo.garant.ru/#/basesearch/{encoded_query}/all:0"
                self.driver.get(search_url)
                
                # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
                time.sleep(2)
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                wait = WebDriverWait(self.driver, 15)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
                
                try:
                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                    wait.until(
                        EC.presence_of_element_located((By.XPATH, '/html/body/div[1]/div[2]/div[2]/div[2]/div[2]/div/div/div/div[2]/div/div/div[2]/div/div/div[4]/div/div/ul[1]/li[1]/a'))
                    )
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                    time.sleep(1)
                    
                    # –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏ –º–∞—Å–æ–∫
                    try:
                        # –ñ–¥–µ–º –ø–æ–∫–∞ –∏—Å—á–µ–∑–Ω—É—Ç –≤—Å–µ –º–∞—Å–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                        self._wait_for_page_ready()
                    except:
                        pass  # –ï—Å–ª–∏ –º–∞—Å–∫–∏ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    
                    # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                    result_link = wait.until(
                        EC.presence_of_element_located((By.XPATH, '/html/body/div[1]/div[2]/div[2]/div[2]/div[2]/div/div/div/div[2]/div/div/div[2]/div/div/div[4]/div/div/ul[1]/li[1]/a'))
                    )
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å—Å—ã–ª–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–º—É
                    try:
                        href = result_link.get_attribute('href')
                        if href:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: {href[:100]}...")
                            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Å—Å—ã–ª–∫–µ, –º–∏–Ω—É—è –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                            self.driver.get(href)
                            print("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        else:
                            # –ï—Å–ª–∏ href –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫
                            print("üîÑ Href –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫...")
                            self.driver.execute_script("arguments[0].click();", result_link)
                    except Exception as link_error:
                        print(f"üîÑ –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {str(link_error)[:100]}...")
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                        return self._try_alternative_click(wait, query, not_found_retry_count + 1)
                    
                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                    time.sleep(3)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    current_url = self.driver.current_url
                    if "basesearch" in current_url:
                        # –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                        if not_found_retry_count < max_not_found_retries:
                            not_found_retry_count += 1
                            print(f"üîÑ –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ {not_found_retry_count}/{max_not_found_retries}: {ref.raw[:50]}...")
                            time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                            continue
                        else:
                            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∫–ª–∏–∫–∞
                            return self._try_alternative_click(wait, query, not_found_retry_count + 1)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ message box –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                    self._handle_message_box()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    date_status = self._extract_document_info(ref)
                    
                    if date_status == "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ":
                        # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
                        return self._cache_and_return(query, {
                            "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                            "—Å—Ç–∞—Ç—É—Å": "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ",
                            "url": self.driver.current_url,
                            "–∑–∞–ø—Ä–æ—Å": query,
                            "–º–µ—Ç–æ–¥_–ø—Ä–æ–≤–µ—Ä–∫–∏": "–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                            "–ø–æ–ø—ã—Ç–∫–∏_chrome": chrome_retry_count + 1,
                            "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": not_found_retry_count + 1
                        })
                    
                    # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_source = self.driver.page_source.lower()
                    status = self._analyze_document_status(page_source)
                    
                    return self._cache_and_return(query, {
                        "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                        "—Å—Ç–∞—Ç—É—Å": status,
                        "url": self.driver.current_url,
                        "–∑–∞–ø—Ä–æ—Å": query,
                        "–º–µ—Ç–æ–¥_–ø—Ä–æ–≤–µ—Ä–∫–∏": "–∞–Ω–∞–ª–∏–∑_—Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ",
                        "–ø–æ–ø—ã—Ç–∫–∏_chrome": chrome_retry_count + 1,
                        "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": not_found_retry_count + 1
                    })
                    
                except TimeoutException:
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    if not_found_retry_count < max_not_found_retries:
                        not_found_retry_count += 1
                        print(f"üîÑ Timeout –ø—Ä–∏ –ø–æ–∏—Å–∫–µ, –ø–æ–ø—ã—Ç–∫–∞ {not_found_retry_count}/{max_not_found_retries}: {ref.raw[:50]}...")
                        time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        continue
                    else:
                        return self._cache_and_return(query, {
                            "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢", 
                            "—Å—Ç–∞—Ç—É—Å": "–Ω–µ –Ω–∞–π–¥–µ–Ω",
                            "url": search_url,
                            "–∑–∞–ø—Ä–æ—Å": query,
                            "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": not_found_retry_count + 1
                        })
                        
            except Exception as e:
                error_message = str(e)
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞: {error_message}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π Chrome/—Å–µ—Å—Å–∏–∏
                chrome_errors = [
                    "invalid session id", "session deleted", "chrome not reachable",
                    "chrome failed to start", "connection refused", "webdriver exception",
                    "no such session", "session not created", "chrome crashed"
                ]
                
                is_chrome_error = any(error in error_message.lower() for error in chrome_errors)
                
                if is_chrome_error:
                    chrome_retry_count += 1
                    print(f"üîÑ –û—à–∏–±–∫–∞ Chrome, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞ {chrome_retry_count}/{max_chrome_retries}")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥—Ä–∞–π–≤–µ—Ä –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    self._close_driver()
                    time.sleep(3)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º Chrome
                    continue
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ Chrome, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    return self._cache_and_return(query, {
                        "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                        "—Å—Ç–∞—Ç—É—Å": "–æ—à–∏–±–∫–∞",
                        "url": "https://ivo.garant.ru",
                        "–∑–∞–ø—Ä–æ—Å": query if 'query' in locals() else ref.raw,
                        "–æ—à–∏–±–∫–∞": error_message,
                        "–ø–æ–ø—ã—Ç–∫–∏_chrome": chrome_retry_count + 1,
                        "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": not_found_retry_count + 1
                    })
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ Chrome –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        return self._cache_and_return(query, {
            "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
            "—Å—Ç–∞—Ç—É—Å": "–æ—à–∏–±–∫–∞",
            "url": "https://ivo.garant.ru",
            "–∑–∞–ø—Ä–æ—Å": ref.raw,
            "–æ—à–∏–±–∫–∞": f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ Chrome –∏—Å—á–µ—Ä–ø–∞–Ω—ã ({max_chrome_retries} –ø–æ–ø—ã—Ç–æ–∫)",
            "–ø–æ–ø—ã—Ç–∫–∏_chrome": chrome_retry_count,
            "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": not_found_retry_count + 1
                })

    def _try_alternative_click(self, wait, query, attempt):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∫–ª–∏–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            # –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            try:
                WebDriverWait(self.driver, 5).until_not(
                    EC.presence_of_element_located((By.CSS_SELECTOR, '.x-mask'))
                )
            except:
                pass
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ –±–æ–ª–µ–µ –æ–±—â–µ–º—É XPath
            alternative_xpaths = [
                '/html/body/div[1]/div[2]/div[2]/div[2]/div[2]/div/div/div/div[2]/div/div/div[2]/div/div/div[4]/div/div/ul[1]/li[1]/a',
                '//a[contains(@class, "search-result")]',
                '//div[contains(@class, "search-results")]//a[1]',
                '//ul[contains(@class, "search-list")]//li[1]//a',
                '//ul//li[1]//a',
                '//a[contains(@href, "document")]'
            ]
            
            click_successful = False
            for xpath in alternative_xpaths:
                try:
                    element = wait.until(EC.presence_of_element_located((By.XPATH, xpath)))
                    
                    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å URL –∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é
                    try:
                        href = element.get_attribute('href')
                        if href:
                            print(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {href[:100]}...")
                            self.driver.get(href)
                            print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                            click_successful = True
                            break
                        else:
                            print(f"üîÑ Href –ø—É—Å—Ç–æ–π –¥–ª—è XPath: {xpath}")
                    except Exception as href_error:
                        print(f"üîÑ –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è href –¥–ª—è {xpath}: {str(href_error)[:50]}...")
                    
                    # –ï—Å–ª–∏ href –Ω–µ –ø–æ–ª—É—á–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫
                    try:
                        self.driver.execute_script("arguments[0].click();", element)
                        print(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π JavaScript –∫–ª–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è XPath: {xpath}")
                        click_successful = True
                        break
                    except Exception as js_error:
                        print(f"üîÑ JavaScript –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {xpath}: {str(js_error)[:50]}...")
                        
                except Exception as find_error:
                    print(f"üîÑ –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è XPath {xpath}: {str(find_error)[:50]}...")
                    continue
            
            if not click_successful:
                print("‚ùå –í—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ XPath –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
                return self._cache_and_return(query, {
                    "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                    "—Å—Ç–∞—Ç—É—Å": "–Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "url": self.driver.current_url,
                    "–∑–∞–ø—Ä–æ—Å": query,
                    "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": attempt
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            current_url = self.driver.current_url
            if "basesearch" in current_url:
                return self._cache_and_return(query, {
                    "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                    "—Å—Ç–∞—Ç—É—Å": "–Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "url": current_url,
                    "–∑–∞–ø—Ä–æ—Å": query,
                    "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": attempt
                })
            
            return self._cache_and_return(query, {
                "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                "—Å—Ç–∞—Ç—É—Å": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "url": current_url,
                "–∑–∞–ø—Ä–æ—Å": query,
                "–º–µ—Ç–æ–¥_–ø—Ä–æ–≤–µ—Ä–∫–∏": "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π_–∫–ª–∏–∫",
                "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": attempt
            })
            
        except Exception as e:
            return self._cache_and_return(query, {
                "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                "—Å—Ç–∞—Ç—É—Å": "–æ—à–∏–±–∫–∞",
                "url": self.driver.current_url,
                "–∑–∞–ø—Ä–æ—Å": query,
                "–æ—à–∏–±–∫–∞": str(e),
                "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": attempt
            })
    
    def _extract_document_info(self, ref: Reference) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        
        Args:
            ref: Reference –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            
        Returns:
            –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        try:
            wait = WebDriverWait(self.driver, 10)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(2)
            
            # –ò—â–µ–º "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥." —Å –¥–∞—Ç–æ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            page_source = self.driver.page_source
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥. dd.mm.yyyy"
            import re
            actual_date_pattern = r'–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥\.\s*(\d{1,2}\.\d{1,2}\.\d{4})'
            match = re.search(actual_date_pattern, page_source)
            
            if match:
                actual_date = match.group(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if ref.date and self._dates_match(ref.date, actual_date):
                    return "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ"
                else:
                    # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –¥–æ–∫—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º
                    return "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                if self._analyze_info_text(page_source):
                    return "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ"
                else:
                    return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
        except Exception as e:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def _analyze_info_text(self, info_text: str) -> bool:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        
        Args:
            info_text: –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
        """
        info_text_lower = info_text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        positive_keywords = [
            "–¥–µ–π—Å—Ç–≤—É–µ—Ç", "–¥–µ–π—Å—Ç–≤—É—é—â–∏–π", "–¥–µ–π—Å—Ç–≤—É—é—â–∞—è", "–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ",
            "–≤ —Å–∏–ª–µ", "–∞–∫—Ç—É–∞–ª—å–Ω–æ", "–∞–∫—Ç—É–∞–ª—å–Ω–∞—è", "–∞–∫—Ç—É–∞–ª—å–Ω—ã–π"
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        negative_keywords = [
            "–Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç", "—É—Ç—Ä–∞—Ç–∏–ª —Å–∏–ª—É", "—É—Ç—Ä–∞—Ç–∏–ª–∞ —Å–∏–ª—É", "—É—Ç—Ä–∞—Ç–∏–ª–æ —Å–∏–ª—É",
            "–æ—Ç–º–µ–Ω–µ–Ω", "–æ—Ç–º–µ–Ω–µ–Ω–∞", "–æ—Ç–º–µ–Ω–µ–Ω–æ", "–ø—Ä–∏–∑–Ω–∞–Ω —É—Ç—Ä–∞—Ç–∏–≤—à–∏–º —Å–∏–ª—É"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        for keyword in positive_keywords:
            if keyword in info_text_lower:
                return True
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        for keyword in negative_keywords:
            if keyword in info_text_lower:
                return False
                
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)
        return False
    
    def _dates_match(self, ref_date: str, garant_date: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞—Ç —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        
        Args:
            ref_date: –î–∞—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "27.07.2006")
            garant_date: –î–∞—Ç–∞ –∏–∑ –ì–ê–†–ê–ù–¢ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
            
        Returns:
            True –µ—Å–ª–∏ –¥–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
        """
        import re
        from datetime import datetime
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            ref_date_clean = ref_date.strip()
            
            # –ò—â–µ–º –≤—Å–µ –¥–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ –∏–∑ –ì–ê–†–ê–ù–¢ (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì)
            date_patterns = re.findall(r'\b(\d{1,2})\.(\d{1,2})\.(\d{4})\b', garant_date)
            
            for day, month, year in date_patterns:
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É –î–î.–ú–ú.–ì–ì–ì–ì
                normalized_date = f"{day.zfill(2)}.{month.zfill(2)}.{year}"
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥–∞—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
                if ref_date_clean == normalized_date:
                    return True
                    
                # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –±–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π
                short_date = f"{int(day)}.{int(month)}.{year}"
                if ref_date_clean == short_date:
                    return True
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –¥–∞—Ç—ã –≤ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            if ref_date_clean in garant_date:
                return True
                
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –¥–∞—Ç: {e}")
            return False
    
    def _analyze_document_status(self, page_source: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        expired_keywords = [
            "–Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç", "—É—Ç—Ä–∞—Ç–∏–ª —Å–∏–ª—É", "—É—Ç—Ä–∞—Ç–∏–ª–∞ —Å–∏–ª—É", "—É—Ç—Ä–∞—Ç–∏–ª–æ —Å–∏–ª—É",
            "–ø—Ä–∏–∑–Ω–∞–Ω —É—Ç—Ä–∞—Ç–∏–≤—à–∏–º —Å–∏–ª—É", "–æ—Ç–º–µ–Ω–µ–Ω", "–æ—Ç–º–µ–Ω–µ–Ω–∞", "–∑–∞–º–µ–Ω–µ–Ω", "–∑–∞–º–µ–Ω–µ–Ω–∞",
            "–Ω–µ–¥–µ–π—Å—Ç–≤—É—é—â–∏–π", "–Ω–µ–¥–µ–π—Å—Ç–≤—É—é—â–∞—è", "–Ω–µ–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ"
        ]
        
        active_keywords = [
            "–¥–µ–π—Å—Ç–≤—É–µ—Ç", "–¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è", "–∞–∫—Ç—É–∞–ª—å–Ω–æ", "–≤ —Å–∏–ª–µ",
            "–¥–µ–π—Å—Ç–≤—É—é—â–∏–π", "–¥–µ–π—Å—Ç–≤—É—é—â–∞—è", "–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ"
        ]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        expired_count = sum(page_source.count(keyword) for keyword in expired_keywords)
        active_count = sum(page_source.count(keyword) for keyword in active_keywords)
        
        if expired_count > active_count and expired_count > 0:
            return "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
        elif active_count > expired_count and active_count > 0:
            return "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ"
        else:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def _handle_message_box(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ message box –µ—Å–ª–∏ –æ–Ω –ø–æ—è–≤–ª—è–µ—Ç—Å—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ message box
            message_box = self.driver.find_elements(By.XPATH, '/html/body/div[13]')
            
            if message_box:
                print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω message box, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤ message box
                wait = WebDriverWait(self.driver, 5)
                message_button = wait.until(
                    EC.element_to_be_clickable((By.XPATH, '/html/body/div[13]/div[3]/div/div/a[1]/span/span/span[2]'))
                )
                
                # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ message box
                message_button.click()
                print("‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ message box")
                
                # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
                time.sleep(1)
                print("‚è±Ô∏è  –ü–æ–¥–æ–∂–¥–∞–ª–∏ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ message box")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ message box: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ message box –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω

    def check_multiple_documents(self, refs: List[Reference], keep_windows_open: bool = False) -> Dict[str, Dict]:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Å–µ—Å—Å–∏–π
        
        Args:
            refs: –°–ø–∏—Å–æ–∫ Reference –æ–±—ä–µ–∫—Ç–æ–≤
            keep_windows_open: –û—Å—Ç–∞–≤–∏—Ç—å –æ–∫–Ω–∞ Chrome –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        results = {}
        drivers = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–æ–≤
        search_count = 0  # –°—á–µ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É {len(refs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å {self.max_workers} Chrome –∏–Ω—Å—Ç–∞–Ω—Å–∞–º–∏")
        print(f"üîÑ –†–æ—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 2 –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            with concurrent.futures.ThreadPoolExecutor(max_workers=self.max_workers) as executor:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                future_to_ref = {}
                
                for i, ref in enumerate(refs):
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –∫–∞–∂–¥—ã–µ 2 –ø–æ–∏—Å–∫–∞
                    if i > 0 and i % 2 == 0:
                        with self.lock:
                            print(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ {i} –ø–æ–∏—Å–∫–æ–≤")
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
                        self.session_counter = (self.session_counter + 10) % len(self.session_data_pool)
                    
                    future = executor.submit(self._check_single_document, ref, i % self.max_workers)
                    future_to_ref[future] = ref
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                for future in concurrent.futures.as_completed(future_to_ref):
                    ref_raw, result = future.result()
                    results[ref_raw] = result
                    search_count += 1
                    
                    with self.lock:
                        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ ({search_count}/{len(refs)}): {ref_raw[:50]}... - {result.get('—Å—Ç–∞—Ç—É—Å', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            print(f"üéâ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            print(f"üîÑ –í—Å–µ–≥–æ —Ä–æ—Ç–∞—Ü–∏–π —Å–µ—Å—Å–∏–π: {search_count // 2}")
            
            if keep_windows_open:
                print("üîç Chrome –æ–∫–Ω–∞ –æ—Å—Ç–∞–ª–∏—Å—å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –¥–ª—è –∏–Ω—Å–ø–µ–∫—Ü–∏–∏")
                print("üí° –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–∞ –≤—Ä—É—á–Ω—É—é –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑")
            else:
                print("üîí Chrome –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            if not keep_windows_open:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–∫–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏
                for driver in drivers:
                    try:
                        driver.quit()
                    except:
                        pass
        
        return results
    
    def __enter__(self):
        self._setup_driver()
        return self
        
    def __exit__(self, exc_type, exc_val, exc_tb):
        self._close_driver()

    def _save_to_cache(self, query: str, result: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ SQLite-–∫–µ—à"""
        try:
            self.cache.save_result(query, result)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–µ—à: {e}")

    def _cache_and_return(self, query: str, result: Dict):
        """–•–µ–ª–ø–µ—Ä: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        self._save_to_cache(query, result)
        return result

def should_use_garant_check(validation_results: Dict[str, Dict]) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –ì–ê–†–ê–ù–¢
    
    Args:
        validation_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
    Returns:
        True –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –±–æ–ª—å—à–µ 10
    """
    unknown_count = sum(
        1 for result in validation_results.values() 
        if result.get("—Å—Ç–∞—Ç—É—Å", "").lower() == "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    )
    
    return unknown_count > 10


def enhance_validation_with_garant(refs: List[Reference], validation_results: Dict[str, Dict]) -> Dict[str, Dict]:
    """
    –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –ì–ê–†–ê–ù–¢
    
    Args:
        refs: –°–ø–∏—Å–æ–∫ Reference –æ–±—ä–µ–∫—Ç–æ–≤
        validation_results: –ò—Å—Ö–æ–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        
    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    """
    if not should_use_garant_check(validation_results):
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ì–ê–†–ê–ù–¢ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ <= 10)")
        return validation_results
    
    print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –ì–ê–†–ê–ù–¢...")
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    unknown_refs = []
    for ref in refs:
        if validation_results.get(ref.raw, {}).get("—Å—Ç–∞—Ç—É—Å", "").lower() == "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            unknown_refs.append(ref)
    
    if not unknown_refs:
        return validation_results
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ì–ê–†–ê–ù–¢ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    checker = GarantCheckerParallel(max_workers=5, headless=False)
    garant_results = checker.check_multiple_documents(unknown_refs)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    updated_results = validation_results.copy()
    
    for ref_raw, garant_result in garant_results.items():
        if ref_raw in updated_results:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –ì–ê–†–ê–ù–¢ –¥–∞–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            garant_status = garant_result.get("—Å—Ç–∞—Ç—É—Å", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            if garant_status in ["–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ", "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"]:
                updated_results[ref_raw]["—Å—Ç–∞—Ç—É—Å"] = garant_status.title()
                updated_results[ref_raw]["—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"] = 0.8  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ì–ê–†–ê–ù–¢
                updated_results[ref_raw]["–∏—Å—Ç–æ—á–Ω–∏–∫_–ø—Ä–æ–≤–µ—Ä–∫–∏"] = "–ì–ê–†–ê–ù–¢"
    
    return updated_results

class GarantCheckerParallel:
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ì–ê–†–ê–ù–¢ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ Chrome –∏–Ω—Å—Ç–∞–Ω—Å–∞–º–∏"""
    
    def __init__(self, max_workers: int = 5, headless: bool = False, cache_db_path: str = "garant_cache_parallel.db", cache_ttl_hours: int = 24 * 7):
        self.max_workers = max_workers
        self.headless = headless
        self.cache = GarantCache(cache_db_path, cache_ttl_hours)
        self.lock = threading.Lock()
        self.session_counter = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–æ–≤
        self.session_data_pool = self._generate_session_data_pool()
        
    def _generate_session_data_pool(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–ª–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏"""
        user_agents = [
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
        ]
        
        window_sizes = [
            "1920,1080",
            "1366,768", 
            "1440,900",
            "1536,864",
            "1280,720"
        ]
        
        session_pool = []
        for i in range(20):  # –°–æ–∑–¥–∞–µ–º 20 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            session_pool.append({
                'user_agent': user_agents[i % len(user_agents)],
                'window_size': window_sizes[i % len(window_sizes)],
                'session_id': f"session_{i}_{hash(str(i)) % 10000}",
                'debug_port': 9222 + (i % 10),  # –†–æ—Ç–∞—Ü–∏—è –ø–æ—Ä—Ç–æ–≤
                'user_data_dir': f"/tmp/chrome_session_{i}_{hash(str(i)) % 10000}"
            })
        
        return session_pool
    
    def _get_next_session_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏"""
        with self.lock:
            session_data = self.session_data_pool[self.session_counter % len(self.session_data_pool)]
            self.session_counter += 1
            return session_data
    
    def _create_driver(self, instance_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ Chrome WebDriver –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Å–µ—Å—Å–∏–π"""
        chrome_options = Options()
        if self.headless:
            chrome_options.add_argument("--headless")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        session_data = self._get_next_session_data()
        
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument(f"--window-size={session_data['window_size']}")
        chrome_options.add_argument(f"--user-agent={session_data['user_agent']}")
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
        chrome_options.add_argument(f"--remote-debugging-port={session_data['debug_port']}")
        chrome_options.add_argument(f"--user-data-dir={session_data['user_data_dir']}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--allow-running-insecure-content")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")
        
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
        driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        return driver
    
    def _wait_for_page_ready_parallel(self, driver):
        """–ñ–¥–µ—Ç –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        try:
            # –ñ–¥–µ–º –ø–æ–∫–∞ –∏—Å—á–µ–∑–Ω—É—Ç –≤—Å–µ –º–∞—Å–∫–∏
            WebDriverWait(driver, 10).until_not(
                EC.presence_of_element_located((By.CSS_SELECTOR, '.x-mask'))
            )
        except:
            pass
        
        try:
            # –ñ–¥–µ–º –ø–æ–∫–∞ –∏—Å—á–µ–∑–Ω—É—Ç –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            WebDriverWait(driver, 5).until_not(
                EC.presence_of_element_located((By.CSS_SELECTOR, '.x-mask-loading'))
            )
        except:
            pass
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –ª—é–±—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ —Å –ø–æ–º–æ—â—å—é Escape
            from selenium.webdriver.common.keys import Keys
            driver.find_element(By.TAG_NAME, 'body').send_keys(Keys.ESCAPE)
            time.sleep(0.5)
        except:
            pass
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        time.sleep(2)

    def _save_to_cache_parallel(self, query: str, result: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ SQLite-–∫–µ—à (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            with self.lock:  # Thread-safe caching
                self.cache.save_result(query, result)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–µ—à: {e}")

    def _cache_and_return_parallel(self, query: str, result: Dict):
        """–•–µ–ª–ø–µ—Ä: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        self._save_to_cache_parallel(query, result)
        return result

    def _check_single_document(self, ref: Reference, instance_id: int) -> tuple:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º Chrome –∏–Ω—Å—Ç–∞–Ω—Å–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        max_chrome_retries = 3  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –æ—à–∏–±–æ–∫ Chrome
        max_not_found_retries = 2  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤ "–Ω–µ –Ω–∞–π–¥–µ–Ω"
        chrome_retry_count = 0
        not_found_retry_count = 0
        query = self._format_query(ref)  # Move query definition to the top
        
        while chrome_retry_count < max_chrome_retries:
            driver = None
            try:
                driver = self._create_driver(instance_id)
                
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
                self._clear_session_data(driver)
                
                # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è URL
                encoded_query = urllib.parse.quote(query)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º (thread-safe)
                with self.lock:
                    cached = self.cache.get_cached_result(query)
                    if cached:
                        cached["–∏–∑_–∫–µ—à–∞"] = True
                        cached["–∏–Ω—Å—Ç–∞–Ω—Å"] = instance_id
                        return ref.raw, cached
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ —Å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                search_url = f"https://ivo.garant.ru/#/basesearch/{encoded_query}/all:0"
                driver.get(search_url)
                
                # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
                time.sleep(2)
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                wait = WebDriverWait(driver, 15)
                
                try:
                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
                    wait.until(
                        EC.presence_of_element_located((By.XPATH, '/html/body/div[1]/div[2]/div[2]/div[2]/div[2]/div/div/div/div[2]/div/div/div[2]/div/div/div[4]/div/div/ul[1]/li[1]/a'))
                    )
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                    time.sleep(1)
                    
                    # –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –∏ –º–∞—Å–æ–∫
                    try:
                        # –ñ–¥–µ–º –ø–æ–∫–∞ –∏—Å—á–µ–∑–Ω—É—Ç –≤—Å–µ –º–∞—Å–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                        self._wait_for_page_ready_parallel(driver)
                    except:
                        pass  # –ï—Å–ª–∏ –º–∞—Å–∫–∏ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                    
                    # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                    result_link = wait.until(
                        EC.presence_of_element_located((By.XPATH, '/html/body/div[1]/div[2]/div[2]/div[2]/div[2]/div/div/div/div[2]/div/div/div[2]/div/div/div[4]/div/div/ul[1]/li[1]/a'))
                    )
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å—Å—ã–ª–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–º—É
                    try:
                        href = result_link.get_attribute('href')
                        if href:
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç: {href[:100]}...")
                            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Å—Å—ã–ª–∫–µ, –º–∏–Ω—É—è –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                            driver.get(href)
                            print(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        else:
                            # –ï—Å–ª–∏ href –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫
                            print("üîÑ Href –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫...")
                            driver.execute_script("arguments[0].click();", result_link)
                    except Exception as link_error:
                        print(f"üîÑ –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {str(link_error)[:100]}...")
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                        return self._try_alternative_click(wait, query, not_found_retry_count + 1, driver, instance_id)
                    
                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                    time.sleep(3)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    current_url = driver.current_url
                    if "basesearch" in current_url:
                        # –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                        if not_found_retry_count < max_not_found_retries:
                            not_found_retry_count += 1
                            print(f"üîÑ [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ {not_found_retry_count}/{max_not_found_retries}: {ref.raw[:50]}...")
                            time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                            continue
                        else:
                            result = self._cache_and_return_parallel(query, {
                                "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢", 
                                "—Å—Ç–∞—Ç—É—Å": "–Ω–µ –Ω–∞–π–¥–µ–Ω",
                                "url": search_url,
                                "–∑–∞–ø—Ä–æ—Å": query,
                                "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": not_found_retry_count + 1
                            })
                            return ref.raw, result
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ message box –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
                    self._handle_message_box_parallel(driver, instance_id)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    date_status = self._extract_document_info_parallel(driver, ref, instance_id)
                    
                    if date_status == "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ":
                        result = self._cache_and_return_parallel(query, {
                            "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                            "—Å—Ç–∞—Ç—É—Å": "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ",
                            "url": driver.current_url,
                            "–∑–∞–ø—Ä–æ—Å": query,
                            "–º–µ—Ç–æ–¥_–ø—Ä–æ–≤–µ—Ä–∫–∏": "–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                            "–ø–æ–ø—ã—Ç–∫–∏_chrome": chrome_retry_count + 1,
                            "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": not_found_retry_count + 1
                        })
                        return ref.raw, result
                    
                    # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_source = driver.page_source.lower()
                    status = self._analyze_document_status(page_source)
                    
                    result = self._cache_and_return_parallel(query, {
                        "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                        "—Å—Ç–∞—Ç—É—Å": status,
                        "url": driver.current_url,
                        "–∑–∞–ø—Ä–æ—Å": query,
                        "–º–µ—Ç–æ–¥_–ø—Ä–æ–≤–µ—Ä–∫–∏": "–∞–Ω–∞–ª–∏–∑_—Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ",
                        "–ø–æ–ø—ã—Ç–∫–∏_chrome": chrome_retry_count + 1,
                        "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": not_found_retry_count + 1
                    })
                    return ref.raw, result
                    
                except TimeoutException:
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    if not_found_retry_count < max_not_found_retries:
                        not_found_retry_count += 1
                        print(f"üîÑ [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] Timeout –ø—Ä–∏ –ø–æ–∏—Å–∫–µ, –ø–æ–ø—ã—Ç–∫–∞ {not_found_retry_count}/{max_not_found_retries}: {ref.raw[:50]}...")
                        time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        continue
                    else:
                        result = self._cache_and_return_parallel(query, {
                            "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢", 
                            "—Å—Ç–∞—Ç—É—Å": "–Ω–µ –Ω–∞–π–¥–µ–Ω",
                            "url": search_url,
                            "–∑–∞–ø—Ä–æ—Å": query,
                            "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": not_found_retry_count + 1
                        })
                        return ref.raw, result
                    
            except Exception as e:
                error_message = str(e)
                print(f"‚ö†Ô∏è  [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] –û—à–∏–±–∫–∞: {error_message}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π Chrome/—Å–µ—Å—Å–∏–∏
                chrome_errors = [
                    "invalid session id", "session deleted", "chrome not reachable",
                    "chrome failed to start", "connection refused", "webdriver exception",
                    "no such session", "session not created", "chrome crashed"
                ]
                
                is_chrome_error = any(error in error_message.lower() for error in chrome_errors)
                
                if is_chrome_error:
                    chrome_retry_count += 1
                    print(f"üîÑ [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] –û—à–∏–±–∫–∞ Chrome, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω—Å—Ç–∞–Ω—Å–∞ {chrome_retry_count}/{max_chrome_retries}")
                    time.sleep(3)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º Chrome
                    continue
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ Chrome, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    result = self._cache_and_return_parallel(query, {
                        "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                        "—Å—Ç–∞—Ç—É—Å": "–æ—à–∏–±–∫–∞",
                        "url": "https://ivo.garant.ru",
                        "–∑–∞–ø—Ä–æ—Å": query if 'query' in locals() else ref.raw,
                        "–æ—à–∏–±–∫–∞": error_message,
                        "–ø–æ–ø—ã—Ç–∫–∏_chrome": chrome_retry_count + 1,
                        "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": not_found_retry_count + 1
                    })
                    return ref.raw, result
            finally:
                if driver:
                    try:
                        driver.quit()
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ Chrome –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        result = self._cache_and_return_parallel(query, {
            "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
            "—Å—Ç–∞—Ç—É—Å": "–æ—à–∏–±–∫–∞",
            "url": "https://ivo.garant.ru",
            "–∑–∞–ø—Ä–æ—Å": ref.raw,
            "–æ—à–∏–±–∫–∞": f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ Chrome –∏—Å—á–µ—Ä–ø–∞–Ω—ã ({max_chrome_retries} –ø–æ–ø—ã—Ç–æ–∫)",
            "–ø–æ–ø—ã—Ç–∫–∏_chrome": chrome_retry_count,
            "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": not_found_retry_count + 1
        })
        return ref.raw, result
    
    def _clear_session_data(self, driver):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        try:
            # –û—á–∏—â–∞–µ–º cookies
            driver.delete_all_cookies()
            
            # –û—á–∏—â–∞–µ–º localStorage –∏ sessionStorage
            driver.execute_script("window.localStorage.clear();")
            driver.execute_script("window.sessionStorage.clear();")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
            driver.execute_script("""
                // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                Object.defineProperty(navigator, 'webdriver', {get: () => undefined});
                Object.defineProperty(navigator, 'plugins', {get: () => [1, 2, 3, 4, 5]});
                Object.defineProperty(navigator, 'languages', {get: () => ['en-US', 'en']});
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                window.chrome = {
                    runtime: {},
                };
                
                // –°–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
                delete window.cdc_adoQpoasnfa76pfcZLmcfl_Array;
                delete window.cdc_adoQpoasnfa76pfcZLmcfl_Promise;
                delete window.cdc_adoQpoasnfa76pfcZLmcfl_Symbol;
            """)
            
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö
            pass
    
    def _format_query(self, ref: Reference) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        query_parts = []
        
        if ref.number:
            query_parts.append(f"‚Ññ {ref.number}")
        if ref.date:
            query_parts.append(f"–æ—Ç {ref.date}")
        if ref.title and not ref.number:
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            query_parts.append(ref.title[:50])
            
        return " ".join(query_parts)
    
    def _handle_message_box_parallel(self, driver, instance_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ message box –µ—Å–ª–∏ –æ–Ω –ø–æ—è–≤–ª—è–µ—Ç—Å—è (–¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ message box
            message_box = driver.find_elements(By.XPATH, '/html/body/div[13]')
            
            if message_box:
                print(f"üîç [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] –û–±–Ω–∞—Ä—É–∂–µ–Ω message box, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")
                
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤ message box
                wait = WebDriverWait(driver, 5)
                message_button = wait.until(
                    EC.element_to_be_clickable((By.XPATH, '/html/body/div[13]/div[3]/div/div/a[1]/span/span/span[2]'))
                )
                
                # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ message box
                message_button.click()
                print(f"‚úÖ [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ message box")
                
                # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö
                time.sleep(1)
                
        except Exception as e:
            print(f"‚ö†Ô∏è  [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ message box: {e}")
    
    def _extract_document_info_parallel(self, driver, ref: Reference, instance_id: int) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ (–¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)"""
        try:
            wait = WebDriverWait(driver, 10)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(2)
            
            # –ò—â–µ–º "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥." —Å –¥–∞—Ç–æ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            page_source = driver.page_source
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥. dd.mm.yyyy"
            import re
            actual_date_pattern = r'–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥\.\s*(\d{1,2}\.\d{1,2}\.\d{4})'
            match = re.search(actual_date_pattern, page_source)
            
            if match:
                actual_date = match.group(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if ref.date and self._dates_match(ref.date, actual_date):
                    return "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ"
                else:
                    # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –¥–æ–∫—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º
                    return "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                if self._analyze_info_text(page_source):
                    return "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ"
                else:
                    return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
        except Exception as e:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def _dates_match(self, ref_date: str, garant_date: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞—Ç —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
        import re
        from datetime import datetime
        
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            ref_date_clean = ref_date.strip()
            
            # –ò—â–µ–º –≤—Å–µ –¥–∞—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ –∏–∑ –ì–ê–†–ê–ù–¢ (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì)
            date_patterns = re.findall(r'\b(\d{1,2})\.(\d{1,2})\.(\d{4})\b', garant_date)
            
            for day, month, year in date_patterns:
                # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É –î–î.–ú–ú.–ì–ì–ì–ì
                normalized_date = f"{day.zfill(2)}.{month.zfill(2)}.{year}"
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –¥–∞—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
                if ref_date_clean == normalized_date:
                    return True
                    
                # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –±–µ–∑ –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π
                short_date = f"{int(day)}.{int(month)}.{year}"
                if ref_date_clean == short_date:
                    return True
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –¥–∞—Ç—ã –≤ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            if ref_date_clean in garant_date:
                return True
                
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –¥–∞—Ç: {e}")
            return False
    
    def _analyze_info_text(self, info_text: str) -> bool:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        info_text_lower = info_text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        positive_keywords = [
            "–¥–µ–π—Å—Ç–≤—É–µ—Ç", "–¥–µ–π—Å—Ç–≤—É—é—â–∏–π", "–¥–µ–π—Å—Ç–≤—É—é—â–∞—è", "–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ",
            "–≤ —Å–∏–ª–µ", "–∞–∫—Ç—É–∞–ª—å–Ω–æ", "–∞–∫—Ç—É–∞–ª—å–Ω–∞—è", "–∞–∫—Ç—É–∞–ª—å–Ω—ã–π"
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        negative_keywords = [
            "–Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç", "—É—Ç—Ä–∞—Ç–∏–ª —Å–∏–ª—É", "—É—Ç—Ä–∞—Ç–∏–ª–∞ —Å–∏–ª—É", "—É—Ç—Ä–∞—Ç–∏–ª–æ —Å–∏–ª—É",
            "–æ—Ç–º–µ–Ω–µ–Ω", "–æ—Ç–º–µ–Ω–µ–Ω–∞", "–æ—Ç–º–µ–Ω–µ–Ω–æ", "–ø—Ä–∏–∑–Ω–∞–Ω —É—Ç—Ä–∞—Ç–∏–≤—à–∏–º —Å–∏–ª—É"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        for keyword in positive_keywords:
            if keyword in info_text_lower:
                return True
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        for keyword in negative_keywords:
            if keyword in info_text_lower:
                return False
                
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)
        return False
    
    def _analyze_document_status(self, page_source: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        expired_keywords = [
            "–Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç", "—É—Ç—Ä–∞—Ç–∏–ª —Å–∏–ª—É", "—É—Ç—Ä–∞—Ç–∏–ª–∞ —Å–∏–ª—É", "—É—Ç—Ä–∞—Ç–∏–ª–æ —Å–∏–ª—É",
            "–ø—Ä–∏–∑–Ω–∞–Ω —É—Ç—Ä–∞—Ç–∏–≤—à–∏–º —Å–∏–ª—É", "–æ—Ç–º–µ–Ω–µ–Ω", "–æ—Ç–º–µ–Ω–µ–Ω–∞", "–∑–∞–º–µ–Ω–µ–Ω", "–∑–∞–º–µ–Ω–µ–Ω–∞",
            "–Ω–µ–¥–µ–π—Å—Ç–≤—É—é—â–∏–π", "–Ω–µ–¥–µ–π—Å—Ç–≤—É—é—â–∞—è", "–Ω–µ–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ"
        ]
        
        active_keywords = [
            "–¥–µ–π—Å—Ç–≤—É–µ—Ç", "–¥–µ–π—Å—Ç–≤—É—é—â–∞—è —Ä–µ–¥–∞–∫—Ü–∏—è", "–∞–∫—Ç—É–∞–ª—å–Ω–æ", "–≤ —Å–∏–ª–µ",
            "–¥–µ–π—Å—Ç–≤—É—é—â–∏–π", "–¥–µ–π—Å—Ç–≤—É—é—â–∞—è", "–¥–µ–π—Å—Ç–≤—É—é—â–µ–µ"
        ]
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        expired_count = sum(page_source.count(keyword) for keyword in expired_keywords)
        active_count = sum(page_source.count(keyword) for keyword in active_keywords)
        
        if expired_count > active_count and expired_count > 0:
            return "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
        elif active_count > expired_count and active_count > 0:
            return "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ"
        else:
            return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    def _try_alternative_click(self, wait, query, attempt, driver, instance_id):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∫–ª–∏–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –ñ–¥–µ–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
            try:
                self._wait_for_page_ready_parallel(driver)
            except:
                pass
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ –±–æ–ª–µ–µ –æ–±—â–µ–º—É XPath
            alternative_xpaths = [
                '/html/body/div[1]/div[2]/div[2]/div[2]/div[2]/div/div/div/div[2]/div/div/div[2]/div/div/div[4]/div/div/ul[1]/li[1]/a',
                '//a[contains(@class, "search-result")]',
                '//div[contains(@class, "search-results")]//a[1]',
                '//ul[contains(@class, "search-list")]//li[1]//a',
                '//ul//li[1]//a',
                '//a[contains(@href, "document")]'
            ]
            
            click_successful = False
            for xpath in alternative_xpaths:
                try:
                    element = wait.until(EC.presence_of_element_located((By.XPATH, xpath)))
                    
                    # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å URL –∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é
                    try:
                        href = element.get_attribute('href')
                        if href:
                            print(f"‚úÖ [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: {href[:100]}...")
                            driver.get(href)
                            print(f"‚úÖ [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
                            click_successful = True
                            break
                        else:
                            print(f"üîÑ [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] Href –ø—É—Å—Ç–æ–π –¥–ª—è XPath: {xpath}")
                    except Exception as href_error:
                        print(f"üîÑ [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è href –¥–ª—è {xpath}: {str(href_error)[:50]}...")
                    
                    # –ï—Å–ª–∏ href –Ω–µ –ø–æ–ª—É—á–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º JavaScript –∫–ª–∏–∫
                    try:
                        driver.execute_script("arguments[0].click();", element)
                        print(f"‚úÖ [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π JavaScript –∫–ª–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è XPath: {xpath}")
                        click_successful = True
                        break
                    except Exception as js_error:
                        print(f"üîÑ [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] JavaScript –∫–ª–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {xpath}: {str(js_error)[:50]}...")
                         
                except Exception as find_error:
                    print(f"üîÑ [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è XPath {xpath}: {str(find_error)[:50]}...")
                    continue
            
            if not click_successful:
                print(f"‚ùå [–ò–Ω—Å—Ç–∞–Ω—Å {instance_id}] –í—Å–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ XPath –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
                result = self._cache_and_return_parallel(query, {
                    "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                    "—Å—Ç–∞—Ç—É—Å": "–Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "url": driver.current_url,
                    "–∑–∞–ø—Ä–æ—Å": query,
                    "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": attempt
                })
                return ref.raw, result
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            current_url = driver.current_url
            if "basesearch" in current_url:
                result = self._cache_and_return_parallel(query, {
                    "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                    "—Å—Ç–∞—Ç—É—Å": "–Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "url": current_url,
                    "–∑–∞–ø—Ä–æ—Å": query,
                    "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": attempt
                })
                return ref.raw, result
            
            result = self._cache_and_return_parallel(query, {
                "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                "—Å—Ç–∞—Ç—É—Å": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "url": current_url,
                "–∑–∞–ø—Ä–æ—Å": query,
                "–º–µ—Ç–æ–¥_–ø—Ä–æ–≤–µ—Ä–∫–∏": "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π_–∫–ª–∏–∫",
                "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": attempt
            })
            return ref.raw, result
            
        except Exception as e:
            result = self._cache_and_return_parallel(query, {
                "–∏—Å—Ç–æ—á–Ω–∏–∫": "–ì–ê–†–ê–ù–¢",
                "—Å—Ç–∞—Ç—É—Å": "–æ—à–∏–±–∫–∞",
                "url": driver.current_url,
                "–∑–∞–ø—Ä–æ—Å": query,
                "–æ—à–∏–±–∫–∞": str(e),
                "–ø–æ–ø—ã—Ç–∫–∏_–ø–æ–∏—Å–∫–∞": attempt
            })
            return ref.raw, result
    
    def check_multiple_documents(self, refs: List[Reference], keep_windows_open: bool = False) -> Dict[str, Dict]:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Å–µ—Å—Å–∏–π
        
        Args:
            refs: –°–ø–∏—Å–æ–∫ Reference –æ–±—ä–µ–∫—Ç–æ–≤
            keep_windows_open: –û—Å—Ç–∞–≤–∏—Ç—å –æ–∫–Ω–∞ Chrome –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        results = {}
        drivers = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–æ–≤
        search_count = 0  # –°—á–µ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–π
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É {len(refs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å {self.max_workers} Chrome –∏–Ω—Å—Ç–∞–Ω—Å–∞–º–∏")
        print(f"üîÑ –†–æ—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–µ 2 –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            with concurrent.futures.ThreadPoolExecutor(max_workers=self.max_workers) as executor:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                future_to_ref = {}
                
                for i, ref in enumerate(refs):
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –∫–∞–∂–¥—ã–µ 2 –ø–æ–∏—Å–∫–∞
                    if i > 0 and i % 2 == 0:
                        with self.lock:
                            print(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ {i} –ø–æ–∏—Å–∫–æ–≤")
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
                        self.session_counter = (self.session_counter + 10) % len(self.session_data_pool)
                    
                    future = executor.submit(self._check_single_document, ref, i % self.max_workers)
                    future_to_ref[future] = ref
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                for future in concurrent.futures.as_completed(future_to_ref):
                    ref_raw, result = future.result()
                    results[ref_raw] = result
                    search_count += 1
                    
                    with self.lock:
                        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ ({search_count}/{len(refs)}): {ref_raw[:50]}... - {result.get('—Å—Ç–∞—Ç—É—Å', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            print(f"üéâ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            print(f"üîÑ –í—Å–µ–≥–æ —Ä–æ—Ç–∞—Ü–∏–π —Å–µ—Å—Å–∏–π: {search_count // 2}")
            
            if keep_windows_open:
                print("üîç Chrome –æ–∫–Ω–∞ –æ—Å—Ç–∞–ª–∏—Å—å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –¥–ª—è –∏–Ω—Å–ø–µ–∫—Ü–∏–∏")
                print("üí° –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–∞ –≤—Ä—É—á–Ω—É—é –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑")
            else:
                print("üîí Chrome –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            if not keep_windows_open:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–∫–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏
                for driver in drivers:
                    try:
                        driver.quit()
                    except:
                        pass
        
        return results 